import os
import asyncio
import logging
import mysql.connector

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from brain import QueueManager

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ö–æ–Ω—Ñ—ñ–≥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL
db_config = {
    'user': 'bot_user',
    'password': '7730130',  # üîÅ –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    'host': 'localhost',
    'database': 'telegram_queue'
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()
queue_manager = QueueManager()

# –î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ MySQL
def insert_user(user_id, user_name, position):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO queue (user_id, user_name, position) VALUES (%s, %s, %s)",
            (user_id, user_name, position)
        )
        conn.commit()
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –¥–æ–¥–∞–Ω–∏–π –∑ –ø–æ–∑–∏—Ü—ñ—î—é {position}")
    except mysql.connector.Error as err:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î: {err}")
    finally:
        if 'cursor' in locals(): cursor.close()
        if 'conn' in locals(): conn.close()

def get_main_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É", callback_data='join')],
        [InlineKeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç–∏ —á–µ—Ä–≥—É", callback_data='leave')],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É", callback_data='view')],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∏–π!", callback_data='next')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    logger.info(f"/start –≤—ñ–¥ {message.from_user.id} ({message.from_user.username})")
    await message.answer("–í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó —á–µ—Ä–≥–∏. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_keyboard())

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    stats = queue_manager.get_stats()
    await message.answer(stats, reply_markup=get_main_keyboard())

@dp.callback_query()
async def button_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    chat_id = callback.message.chat.id
    logger.info(f"callback {callback.data} –≤—ñ–¥ {user_id} ({callback.from_user.username})")

    try:
        if callback.data == 'join':
            response = queue_manager.join_queue(user_id, user_name)
            await queue_manager.save_queue()
            insert_user(user_id, user_name, len(queue_manager.queue))

        elif callback.data == 'leave':
            response = queue_manager.leave_queue(user_id)
            await queue_manager.save_queue()

        elif callback.data == 'view':
            response = queue_manager.view_queue()

        elif callback.data == 'next':
            response, updated_users = await queue_manager.next_in_queue()
            await queue_manager.save_queue()
            if queue_manager.queue:
                asyncio.create_task(queue_manager.remind_first(bot, chat_id))
            for uid in updated_users:
                notify_msg = await queue_manager.notify_position(uid)
                await bot.send_message(chat_id=chat_id, text=notify_msg)

        await callback.message.edit_text(response, reply_markup=get_main_keyboard())
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ callback {callback.data}: {e}")
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await callback.answer()

async def check_token():
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä–µ–∫—Ç–Ω–∏–π: @{bot_info.username}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
        return False

async def disable_webhook():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–í–µ–±—Ö—É–∫–∏ –≤–∏–º–∫–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫—ñ–≤: {e}")

async def main():
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        if not await check_token():
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π TELEGRAM_TOKEN —É .env")
        await disable_webhook()
        await queue_manager.startup()
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        raise

if __name__ == '__main__':
    asyncio.run(main())
