import os
import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from brain import QueueManager

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ö–æ–Ω—Ñ—ñ–≥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL
db_config = {
    'user': 'bot_user',
    'password': os.getenv('MYSQL_PASSWORD', '7730130'),
    'host': 'localhost',
    'database': 'telegram_queue'
}

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()
queue_manager = QueueManager(db_config)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞
def get_contact_keyboard() -> ReplyKeyboardMarkup:
    kb = [[KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)

# –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
def get_main_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É", callback_data='join')],
        [InlineKeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç–∏ —á–µ—Ä–≥—É", callback_data='leave')],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É", callback_data='view')],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∏–π!", callback_data='next')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    logger.info(f"/start –≤—ñ–¥ {user_id} ({user_name})")

    phone_number = await queue_manager.phone_exists(user_id)
    if phone_number:
        await message.answer("–í—ñ—Ç–∞—é –∑–Ω–æ–≤—É! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_keyboard())
    else:
        await message.answer("–í—ñ—Ç–∞—é! –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=get_contact_keyboard())

# –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É
@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: types.Message):
    contact = message.contact
    user_id = contact.user_id
    phone_number = contact.phone_number
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"

    logger.info(f"üìû –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä: {phone_number} –≤—ñ–¥ {user_name} (ID: {user_id})")
    await queue_manager.save_user_phone(user_id, user_name, phone_number)

    await message.answer(
        "‚úÖ –î—è–∫—É—é! –í–∞—à –Ω–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=get_main_keyboard()
    )

# /stats
@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    stats = queue_manager.get_stats()
    await message.answer(stats, reply_markup=get_main_keyboard())

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def button_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    chat_id = callback.message.chat.id

    logger.info(f"üîò callback {callback.data} –≤—ñ–¥ {user_id} ({user_name})")

    try:
        if callback.data == 'join':
            phone_number = await queue_manager.phone_exists(user_id)
            if not phone_number:
                await callback.message.edit_text(
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.",
                    reply_markup=get_main_keyboard()
                )
                await callback.answer()
                return
            response = queue_manager.join_queue(user_id, user_name)
            await queue_manager.save_queue()

        elif callback.data == 'leave':
            response = queue_manager.leave_queue(user_id)
            await queue_manager.save_queue()

        elif callback.data == 'view':
            response = queue_manager.view_queue()

        elif callback.data == 'next':
            response, updated_users = await queue_manager.next_in_queue()
            await queue_manager.save_queue()
            if queue_manager.queue:
                asyncio.create_task(queue_manager.remind_first(bot, chat_id))
            for uid in updated_users:
                notify_msg = await queue_manager.notify_position(uid)
                await bot.send_message(chat_id=chat_id, text=notify_msg)

        await callback.message.edit_text(response, reply_markup=get_main_keyboard())
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå callback {callback.data}: {e}")
        await callback.message.edit_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await callback.answer()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É
async def check_token():
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä–µ–∫—Ç–Ω–∏–π: @{bot_info.username}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
        return False

# –í–∏–º–∫–Ω—É—Ç–∏ –≤–µ–±—Ö—É–∫–∏
async def disable_webhook():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üåê –í–µ–±—Ö—É–∫–∏ –≤–∏–º–∫–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–í–∏–º–∫–Ω–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫—ñ–≤: {e}")

# –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def shutdown():
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
    await queue_manager.clear_queue()
    await bot.session.close()
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        if not await check_token():
            raise ValueError("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π TELEGRAM_TOKEN —É .env")
        await disable_webhook()
        await queue_manager.startup()
        logger.info("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise
    finally:
        await shutdown()

if __name__ == '__main__':
    asyncio.run(main())