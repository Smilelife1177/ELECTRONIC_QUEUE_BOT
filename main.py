import os
import asyncio
import logging
import mysql.connector
import re

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from brain import QueueManager

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL
db_config = {
    'user': 'bot_user',
    'password': os.getenv('MYSQL_PASSWORD', '7730130'),
    'host': 'localhost',
    'database': 'telegram_queue'
}

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()
queue_manager = QueueManager(db_config)
user_context = {}  # {user_id: university_id}

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
class BroadcastStates(StatesGroup):
    waiting_for_message = State()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ —ñ–∑ –¥—ñ—è–º–∏
BUTTON_MAPPING = {
    "‚û°Ô∏è –ü–æ—á–∞—Ç–∏ ‚¨ÖÔ∏è": "–ü–æ—á–∞—Ç–∏",
    "üéì –í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç üéì": "–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç",
    "‚ûï –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É ‚ûï": "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É",
    "‚ûñ –ü–æ–∫–∏–Ω—É—Ç–∏ —á–µ—Ä–≥—É ‚ûñ": "–ü–æ–∫–∏–Ω—É—Ç–∏ —á–µ—Ä–≥—É",
    "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É üîç": "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É",
    "ü™™ –ú–æ—è –ø–æ–∑–∏—Ü—ñ—è ü™™": "–ú–æ—è –ø–æ–∑–∏—Ü—ñ—è",
    "üìú –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é üìú": "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é",
    "‚è≠Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä—à–æ–≥–æ ‚è≠Ô∏è": "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä—à–æ–≥–æ",
    "üì¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì¢": "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ –µ–º–æ–¥–∑—ñ —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤
def clean_button_text(text: str) -> str:
    # –í–∏–¥–∞–ª—è—î–º–æ –µ–º–æ–¥–∑—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é regex —Ç–∞ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    text = re.sub(r'[^\w\s]', '', text).strip()
    return text

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞
def get_contact_keyboard() -> ReplyKeyboardMarkup:
    kb = [[KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É üì±", request_contact=True)]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)

# –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ReplyKeyboardMarkup
async def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    is_admin = await queue_manager.is_admin(user_id)
    keyboard = [
        [KeyboardButton(text="üéì –í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç üéì")],
        [KeyboardButton(text="‚ûï –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É ‚ûï")],
        [KeyboardButton(text="‚ûñ –ü–æ–∫–∏–Ω—É—Ç–∏ —á–µ—Ä–≥—É ‚ûñ")],
        [KeyboardButton(text="üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É üîç")],
        [KeyboardButton(text="ü™™ –ú–æ—è –ø–æ–∑–∏—Ü—ñ—è ü™™")]
    ]
    if is_admin:
        keyboard.append([KeyboardButton(text="üìú –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é üìú")])
        keyboard.append([KeyboardButton(text="‚è≠Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä—à–æ–≥–æ ‚è≠Ô∏è")])
        keyboard.append([KeyboardButton(text="üì¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì¢")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É
def get_universities_keyboard(universities) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text=name, callback_data=f"uni_{id}")] for id, name in universities]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = message.from_user.id
    if user_id in user_context:
        del user_context[user_id]  # –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} ({message.from_user.username})")
    
    start_keyboard = ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="‚û°Ô∏è –ü–æ—á–∞—Ç–∏ ‚¨ÖÔ∏è")
        ]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó —á–µ—Ä–≥–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ—á–∞—Ç–∏', —â–æ–± –æ–±—Ä–∞—Ç–∏ –¥—ñ—é:",
        reply_markup=start_keyboard
    )

@dp.message(lambda message: message.text == "‚û°Ô∏è –ü–æ—á–∞—Ç–∏ ‚¨ÖÔ∏è")
async def handle_start_button(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ü–æ—á–∞—Ç–∏'"""
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ({message.from_user.username}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ü–æ—á–∞—Ç–∏' (–æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: '{message.text}')")
    try:
        phone_number = await queue_manager.phone_exists(user_id)
        logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è user_id {user_id}: {'–ó–Ω–∞–π–¥–µ–Ω–æ: ' + phone_number if phone_number else '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}")
        if not phone_number:
            await message.answer(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:",
                reply_markup=get_contact_keyboard()
            )
        else:
            await message.answer(
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=await get_main_keyboard(user_id)
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_start_button –¥–ª—è user_id {user_id}: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_contact_keyboard())

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text in BUTTON_MAPPING)
async def button_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    received_text = message.text
    action = BUTTON_MAPPING[received_text]

    logger.info(f"üîò –ö–Ω–æ–ø–∫–∞ '{received_text}' (–¥—ñ—è: {action}) –≤—ñ–¥ {user_id} ({user_name})")

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = await queue_manager.is_admin(user_id)

        if action in ["–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä—à–æ–≥–æ", "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"] and not is_admin:
            await message.answer("–¶—è –¥—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", reply_markup=await get_main_keyboard(user_id))
            return

        if action == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è":
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
            await state.set_state(BroadcastStates.waiting_for_message)
            return

        if action == "–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç":
            universities = await queue_manager.get_universities()
            if not universities:
                await message.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤.")
                return
            await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç:", reply_markup=get_universities_keyboard(universities))
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∏–±—Ä–∞–Ω–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç (–æ–∫—Ä—ñ–º –∞–¥–º—ñ–Ω—Å—å–∫–∏—Ö –¥—ñ–π)
        university_id = user_context.get(user_id)
        if not university_id and action not in ["–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"]:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ '–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'.", reply_markup=await get_main_keyboard(user_id))
            return

        if action == "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É":
            phone_number = await queue_manager.phone_exists(user_id)
            if not phone_number:
                await message.answer(
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.",
                    reply_markup=get_contact_keyboard()
                )
                return
            response = queue_manager.join_queue(user_id, user_name, university_id)
            await queue_manager.save_queue()

        elif action == "–ü–æ–∫–∏–Ω—É—Ç–∏ —á–µ—Ä–≥—É":
            response = queue_manager.leave_queue(user_id, university_id)
            await queue_manager.save_queue()

        elif action == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É":
            response = queue_manager.view_queue(university_id)

        elif action == "–ú–æ—è –ø–æ–∑–∏—Ü—ñ—è":
            response = await queue_manager.notify_position(user_id, university_id)

        elif action == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é":
            response = await queue_manager.get_user_history(user_id)

        elif action == "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä—à–æ–≥–æ":
            response, updated_users = await queue_manager.next_in_queue(university_id)
            await queue_manager.save_queue()
            if updated_users:
                asyncio.create_task(queue_manager.remind_first(bot, user_id, university_id))

        await message.answer(response, reply_markup=await get_main_keyboard(user_id))

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ '{action}' (–∫–Ω–æ–ø–∫–∞: {received_text}): {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=await get_main_keyboard(user_id))

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
@dp.message(StateFilter(BroadcastStates.waiting_for_message))
async def process_broadcast_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    if not await queue_manager.is_admin(user_id):
        await message.answer("–¶—è –¥—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", reply_markup=await get_main_keyboard(user_id))
        await state.clear()
        return

    message_text = message.text.strip()
    if not message_text:
        await message.answer("–¢–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    try:
        await queue_manager.broadcast_message(bot, user_id, user_name, message_text)
        await message.answer("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!", reply_markup=await get_main_keyboard(user_id))
        await state.clear()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ {user_id}: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=await get_main_keyboard(user_id))
        await state.clear()

# –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É
@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: types.Message):
    contact = message.contact
    user_id = contact.user_id
    phone_number = contact.phone_number
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"

    logger.info(f"üìû –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä: {phone_number} –≤—ñ–¥ {user_name} (ID: {user_id})")
    await queue_manager.save_user_phone(user_id, user_name, phone_number)

    await message.answer(
        "‚úÖ –î—è–∫—É—é! –í–∞—à –Ω–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=await get_main_keyboard(user_id)
    )

# /stats
@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    user_id = message.from_user.id
    university_id = user_context.get(user_id)
    if not university_id:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ '–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'.", reply_markup=await get_main_keyboard(user_id))
        return
    stats = queue_manager.get_stats(university_id)
    await message.answer(stats, reply_markup=await get_main_keyboard(user_id))

# /next
@dp.message(Command("next"))
async def next_command(message: types.Message):
    user_id = message.from_user.id
    university_id = user_context.get(user_id)
    if not university_id:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ '–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'.", reply_markup=await get_main_keyboard(user_id))
        return
    response, updated_users = await queue_manager.next_in_queue(university_id)
    await queue_manager.save_queue()
    await message.answer(response, reply_markup=await get_main_keyboard(user_id))
    # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ–º—É –≤ —á–µ—Ä–∑—ñ
    if updated_users:
        asyncio.create_task(queue_manager.remind_first(bot, user_id, university_id))

# /remove_first
@dp.message(Command("remove_first"))
async def remove_first_command(message: types.Message):
    user_id = message.from_user.id
    if not await queue_manager.is_admin(user_id):
        await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", reply_markup=await get_main_keyboard(user_id))
        return
    university_id = user_context.get(user_id)
    if not university_id:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ '–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'.", reply_markup=await get_main_keyboard(user_id))
        return
    response, updated_users = await queue_manager.next_in_queue(university_id)
    await queue_manager.save_queue()
    await message.answer(response, reply_markup=await get_main_keyboard(user_id))
    # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ–º—É –≤ —á–µ—Ä–∑—ñ
    if updated_users:
        asyncio.create_task(queue_manager.remind_first(bot, user_id, university_id))

# /admin_history
@dp.message(Command("admin_history"))
async def admin_history_command(message: types.Message):
    user_id = message.from_user.id
    if not await queue_manager.is_admin(user_id):
        await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", reply_markup=await get_main_keyboard(user_id))
        return
    history = await queue_manager.get_user_history(user_id)
    await message.answer(history, reply_markup=await get_main_keyboard(user_id))

# /broadcast
@dp.message(Command("broadcast"))
async def broadcast_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await queue_manager.is_admin(user_id):
        await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", reply_markup=await get_main_keyboard(user_id))
        return
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
    await state.set_state(BroadcastStates.waiting_for_message)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É
@dp.callback_query(lambda c: c.data.startswith("uni_"))
async def university_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    university_id = int(callback.data.split("_")[1])

    logger.info(f"üîò –í–∏–±—ñ—Ä —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É {university_id} –≤—ñ–¥ {user_id} ({user_name})")
    user_context[user_id] = university_id

    try:
        await callback.message.edit_text("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤–∏–±—Ä–∞–Ω–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=await get_main_keyboard(user_id))
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=await get_main_keyboard(user_id))
        await callback.answer()

# –û–±—Ä–æ–±–∫–∞ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∫–Ω–æ–ø–æ–∫ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
@dp.callback_query()
async def button_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    university_id = user_context.get(user_id)

    logger.info(f"üîò callback {callback.data} –≤—ñ–¥ {user_id} ({user_name})")

    try:
        if not university_id:
            await callback.message.edit_text(
                "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ '–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'.",
                reply_markup=None
            )
            await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=await get_main_keyboard(user_id))
            await callback.answer()
            return

        if callback.data == 'join':
            phone_number = await queue_manager.phone_exists(user_id)
            if not phone_number:
                await callback.message.edit_text(
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.",
                    reply_markup=None
                )
                await callback.message.answer("–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º:", reply_markup=get_contact_keyboard())
                await callback.answer()
                return
            response = queue_manager.join_queue(user_id, user_name, university_id)
            await queue_manager.save_queue()

        elif callback.data == 'leave':
            response = queue_manager.leave_queue(user_id, university_id)
            await queue_manager.save_queue()

        elif callback.data == 'view':
            response = queue_manager.view_queue(university_id)

        await callback.message.edit_text(response, reply_markup=None)
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=await get_main_keyboard(user_id))
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå callback failure {callback.data}: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=await get_main_keyboard(user_id))
        await callback.answer()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É
async def check_token():
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä–µ–∫—Ç–Ω–∏–π: @{bot_info.username}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
        return False

# –í–∏–º–∫–Ω—É—Ç–∏ –≤–µ–±—Ö—É–∫–∏
async def disable_webhook():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üåê –í–µ–±—Ö—É–∫–∏ –≤–∏–º–∫–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–í–∏–º–∫–Ω–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫—ñ–≤: {e}")

# –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def shutdown():
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
    try:
        await bot.session.close()
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        if not await check_token():
            raise ValueError("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π TELEGRAM_TOKEN —É .env")
        await disable_webhook()
        await queue_manager.startup()
        logger.info("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")
        await dp.start_polling(bot, skip_updates=True)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è")
        await shutdown()
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        await shutdown()
        raise
    finally:
        await shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")