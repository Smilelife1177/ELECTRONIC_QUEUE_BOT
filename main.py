import os
import asyncio
import logging
import atexit
import mysql.connector

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from brain import QueueManager

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ö–æ–Ω—Ñ—ñ–≥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL
db_config = {
    'user': 'bot_user',
    'password': os.getenv('MYSQL_PASSWORD', '7730130'),
    'host': 'localhost',
    'database': 'telegram_queue'
}

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()
queue_manager = QueueManager(db_config)
user_context = {}  # {user_id: university_id}

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ queue –¥–ª—è atexit
def sync_clear_queue():
    logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ queue —á–µ—Ä–µ–∑ atexit")
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM queue")
        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü—è queue —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)")
    except mysql.connector.Error as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ queue: {e}")
    finally:
        if 'cursor' in locals(): cursor.close()
        if 'conn' in locals(): conn.close()

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
atexit.register(sync_clear_queue)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞
def get_contact_keyboard() -> ReplyKeyboardMarkup:
    kb = [[KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)

# –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ReplyKeyboardMarkup
def get_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç")],
        [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É")],
        [KeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç–∏ —á–µ—Ä–≥—É")],
        [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É")],
        [KeyboardButton(text="–ú–æ—è –ø–æ–∑–∏—Ü—ñ—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É
def get_universities_keyboard(universities) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text=name, callback_data=f"uni_{id}")] for id, name in universities]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text in ["–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É", "–ü–æ–∫–∏–Ω—É—Ç–∏ —á–µ—Ä–≥—É", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É", "–ú–æ—è –ø–æ–∑–∏—Ü—ñ—è"])
async def button_handler(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    action = message.text

    logger.info(f"üîò –ö–Ω–æ–ø–∫–∞ '{action}' –≤—ñ–¥ {user_id} ({user_name})")

    try:
        if action == "–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç":
            universities = await queue_manager.get_universities()
            if not universities:
                await message.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤.")
                return
            await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç:", reply_markup=get_universities_keyboard(universities))
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∏–±—Ä–∞–Ω–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç
        university_id = user_context.get(user_id)
        if not university_id:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ '–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'.", reply_markup=get_main_keyboard())
            return

        if action == "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É":
            phone_number = await queue_manager.phone_exists(user_id)
            if not phone_number:
                await message.answer(
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.",
                    reply_markup=get_contact_keyboard()
                )
                return
            response = queue_manager.join_queue(user_id, user_name, university_id)
            await queue_manager.save_queue()

        elif action == "–ü–æ–∫–∏–Ω—É—Ç–∏ —á–µ—Ä–≥—É":
            response = queue_manager.leave_queue(user_id, university_id)
            await queue_manager.save_queue()

        elif action == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É":
            response = queue_manager.view_queue(university_id)

        elif action == "–ú–æ—è –ø–æ–∑–∏—Ü—ñ—è":
            response = await queue_manager.notify_position(user_id, university_id)

        await message.answer(response, reply_markup=get_main_keyboard())

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ '{action}': {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())

# /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    logger.info(f"/start –≤—ñ–¥ {user_id} ({user_name})")

    phone_number = await queue_manager.phone_exists(user_id)
    if phone_number:
        await message.answer("–í—ñ—Ç–∞—é –∑–Ω–æ–≤—É! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_keyboard())
    else:
        await message.answer("–í—ñ—Ç–∞—é! –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=get_contact_keyboard())

# –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É
@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: types.Message):
    contact = message.contact
    user_id = contact.user_id
    phone_number = contact.phone_number
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"

    logger.info(f"üìû –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä: {phone_number} –≤—ñ–¥ {user_name} (ID: {user_id})")
    await queue_manager.save_user_phone(user_id, user_name, phone_number)

    await message.answer(
        "‚úÖ –î—è–∫—É—é! –í–∞—à –Ω–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=get_main_keyboard()
    )

# /stats
@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    user_id = message.from_user.id
    university_id = user_context.get(user_id)
    if not university_id:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ '–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'.", reply_markup=get_main_keyboard())
        return
    stats = queue_manager.get_stats(university_id)
    await message.answer(stats, reply_markup=get_main_keyboard())

# /next (–¥–ª—è –≤–∏–∫–ª–∏–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤ —á–µ—Ä–∑—ñ)
@dp.message(Command("next"))
async def next_command(message: types.Message):
    user_id = message.from_user.id
    university_id = user_context.get(user_id)
    if not university_id:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ '–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'.", reply_markup=get_main_keyboard())
        return
    response, updated_users = await queue_manager.next_in_queue(university_id)
    await queue_manager.save_queue()
    await message.answer(response, reply_markup=get_main_keyboard())
    # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ–º—É –≤ —á–µ—Ä–∑—ñ
    if updated_users:
        asyncio.create_task(queue_manager.remind_first(bot, user_id, university_id))

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É
@dp.callback_query(lambda c: c.data.startswith("uni_"))
async def university_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    university_id = int(callback.data.split("_")[1])

    logger.info(f"üîò –í–∏–±—ñ—Ä —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É {university_id} –≤—ñ–¥ {user_id} ({user_name})")
    user_context[user_id] = university_id

    try:
        await callback.message.edit_text("–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤–∏–±—Ä–∞–Ω–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_keyboard())
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É: {e}")
        await callback.message.edit_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
        await callback.answer()

# –û–±—Ä–æ–±–∫–∞ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∫–Ω–æ–ø–æ–∫ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
@dp.callback_query()
async def button_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name or "–ê–Ω–æ–Ω—ñ–º"
    university_id = user_context.get(user_id)

    logger.info(f"üîò callback {callback.data} –≤—ñ–¥ {user_id} ({user_name})")

    try:
        if not university_id:
            await callback.message.edit_text(
                "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ '–í–∏–±—Ä–∞—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç'.",
                reply_markup=get_main_keyboard()
            )
            await callback.answer()
            return

        if callback.data == 'join':
            phone_number = await queue_manager.phone_exists(user_id)
            if not phone_number:
                await callback.message.edit_text(
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.",
                    reply_markup=get_contact_keyboard()
                )
                await callback.answer()
                return
            response = queue_manager.join_queue(user_id, user_name, university_id)
            await queue_manager.save_queue()

        elif callback.data == 'leave':
            response = queue_manager.leave_queue(user_id, university_id)
            await queue_manager.save_queue()

        elif callback.data == 'view':
            response = queue_manager.view_queue(university_id)

        await callback.message.edit_text(response, reply_markup=get_main_keyboard())
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå callback {callback.data}: {e}")
        await callback.message.edit_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
        await callback.answer()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É
async def check_token():
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä–µ–∫—Ç–Ω–∏–π: @{bot_info.username}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
        return False

# –í–∏–º–∫–Ω—É—Ç–∏ –≤–µ–±—Ö—É–∫–∏
async def disable_webhook():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üåê –í–µ–±—Ö—É–∫–∏ –≤–∏–º–∫–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–í–∏–º–∫–Ω–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫—ñ–≤: {e}")

# –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def shutdown():
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
    try:
        await queue_manager.clear_queue()
        logger.info("–¢–∞–±–ª–∏—Ü—è queue —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ queue: {e}")
    finally:
        await bot.session.close()
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        if not await check_token():
            raise ValueError("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π TELEGRAM_TOKEN —É .env")
        await disable_webhook()
        await queue_manager.startup()
        logger.info("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")
        await dp.start_polling(bot, skip_updates=True)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è, –æ—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ queue...")
        await shutdown()
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        await shutdown()
        raise
    finally:
        await shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–∞–±–ª–∏—Ü—è queue –æ—á–∏—â–µ–Ω–∞")