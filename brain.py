import aiosqlite
from collections import deque
from datetime import datetime
import asyncio
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class QueueManager:
    def __init__(self, db_path="queue.db"):
        self.db_path = db_path
        self.queue = deque()  # –õ–æ–∫–∞–ª—å–Ω–∞ –∫–æ–ø—ñ—è —á–µ—Ä–≥–∏
        self.user_names = {}  # –ö–µ—à —ñ–º–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.join_times = {}  # –ö–µ—à —á–∞—Å—É –≤—Ö–æ–¥—É

    async def startup(self):
        """–í–∏–∫–æ–Ω—É—î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        await self.init_db()

    async def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ —Ç–∞–±–ª–∏—Ü—ñ"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS queue (
                        user_id INTEGER PRIMARY KEY,
                        user_name TEXT NOT NULL,
                        position INTEGER NOT NULL,
                        join_time TEXT NOT NULL
                    )
                """)
                await db.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
                await self.load_queue()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            raise

    async def load_queue(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–≥–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        self.queue.clear()
        self.user_names.clear()
        self.join_times.clear()
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("SELECT user_id, user_name, join_time FROM queue ORDER BY position") as cursor:
                    async for row in cursor:
                        user_id, user_name, join_time = row
                        self.queue.append(user_id)
                        self.user_names[user_id] = user_name
                        self.join_times[user_id] = datetime.fromisoformat(join_time)
            logger.info("–ß–µ—Ä–≥–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–≥–∏: {e}")

    async def save_queue(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("DELETE FROM queue")
                for i, user_id in enumerate(self.queue):
                    await db.execute(
                        "INSERT INTO queue (user_id, user_name, position, join_time) VALUES (?, ?, ?, ?)",
                        (user_id, self.user_names[user_id], i + 1, self.join_times[user_id].isoformat())
                    )
                await db.commit()
                logger.info("–ß–µ—Ä–≥–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–≥–∏: {e}")

    def join_queue(self, user_id: int, user_name: str) -> str:
        """–î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–µ—Ä–≥–∏"""
        if user_id not in self.queue:
            self.queue.append(user_id)
            self.user_names[user_id] = user_name
            self.join_times[user_id] = datetime.now()
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –¥–æ–¥–∞–Ω–∏–π –¥–æ —á–µ—Ä–≥–∏")
            return f"{user_name}, –≤–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ —á–µ—Ä–≥–∏. –í–∞—à –Ω–æ–º–µ—Ä: {len(self.queue)}"
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∂–µ –≤ —á–µ—Ä–∑—ñ")
        return "–í–∏ –≤–∂–µ –≤ —á–µ—Ä–∑—ñ!"

    def leave_queue(self, user_id: int) -> str:
        """–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–µ—Ä–≥–∏"""
        if user_id in self.queue:
            self.queue.remove(user_id)
            user_name = self.user_names.pop(user_id)
            self.join_times.pop(user_id)
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –ø–æ–∫–∏–Ω—É–≤ —á–µ—Ä–≥—É")
            return f"{user_name}, –≤–∏ –ø–æ–∫–∏–Ω—É–ª–∏ —á–µ—Ä–≥—É."
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {user_id}) –Ω–µ –≤ —á–µ—Ä–∑—ñ")
        return "–í–∞—Å –Ω–µ–º–∞—î –≤ —á–µ—Ä–∑—ñ!"

    def view_queue(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–µ—Ä–≥–∏"""
        if not self.queue:
            logger.info("–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è")
            return "–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è."
        queue_list = "\n".join(f"{i+1}. {self.user_names[uid]}" for i, uid in enumerate(self.queue))
        logger.info("–ó–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —á–µ—Ä–≥–∏")
        return f"–ü–æ—Ç–æ—á–Ω–∞ —á–µ—Ä–≥–∞:\n{queue_list}"

    async def next_in_queue(self) -> tuple[str, list[int]]:
        """–í–∏–∫–ª–∏–∫–∞—î –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó"""
        if not self.queue:
            logger.info("–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ")
            return "–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.", []
        next_user = self.queue.popleft()
        next_name = self.user_names.pop(next_user)
        self.join_times.pop(next_user)
        updated_users = list(self.queue)
        logger.info(f"–ù–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {next_name} (ID: {next_user})")
        return f"–ù–∞—Å—Ç—É–ø–Ω–∏–π: {next_name}", updated_users

    async def notify_position(self, user_id: int) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if user_id not in self.queue:
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {user_id}) –Ω–µ –≤ —á–µ—Ä–∑—ñ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
            return "–í–∞—Å –Ω–µ–º–∞—î –≤ —á–µ—Ä–∑—ñ!"
        position = list(self.queue).index(user_id) + 1
        logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è {self.user_names[user_id]} (ID: {user_id}): {position}")
        return f"{self.user_names[user_id]}, –≤–∞—à–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ —á–µ—Ä–∑—ñ: {position}"

    async def remind_first(self, bot, chat_id: int):
        """–ù–∞–≥–∞–¥—É—î –ø–µ—Ä—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —á–µ—Ä–µ–∑ 1 —Ö–≤–∏–ª–∏–Ω—É"""
        if not self.queue:
            logger.info("–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ")
            return
        await asyncio.sleep(60)
        if self.queue:
            first_user = self.queue[0]
            try:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"{self.user_names[first_user]}, –≤–∏ –ø–µ—Ä—à–∏–π —É —á–µ—Ä–∑—ñ! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ—Å—è."
                )
                logger.info(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–µ—Ä—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (ID: {first_user})")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

    def get_stats(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–≥–∏"""
        if not self.queue:
            logger.info("–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return "–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è, –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        total_users = len(self.queue)
        avg_wait = sum((datetime.now() - self.join_times[uid]).total_seconds() / 60 
                       for uid in self.queue) / total_users if total_users else 0
        logger.info(f"–ó–∞–ø–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {total_users} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è {avg_wait:.1f} —Ö–≤–∏–ª–∏–Ω")
        return (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–≥–∏:\n"
                f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤: {total_users}\n"
                f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {avg_wait:.1f} —Ö–≤–∏–ª–∏–Ω")